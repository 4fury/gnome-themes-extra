// Drawing mixins

// generic drawing of more complex things

$widget_bottom_hilight: 0 1px $borders_edge; //outer hilight "used" on 
                                             //most widgets, not working
                                             //since gtk doesn't draw (yet?)
                                             //outside the widget itself.


// buttons

@mixin _button_border_color ($c) {
//
// helper function to draw borders
//
  @if $variant=='light' {
    border-color: darken($c,30%);
  }
  @else {
    border-color: darken($c,10%);
  }
}

@mixin _button_text_shadow ($tc:$theme_fg_color) { 
//
// helper function for the text emboss effect
//
// $tc is the optional text color, not the shadow color
// 
// TODO: this functions needs a way to deal with special cases
//

  $_dark: transparentize(black,0.8);
  $_bright: transparentize(white,0.2);

  @if lightness($tc) < 50% {
    text-shadow: 0 1px $_bright;
    icon-shadow: 0 1px $_bright;
  }
  @else {
    text-shadow: 0 -1px $_dark;
    icon-shadow: 0 -1px $_dark;
  }
}

@mixin _button_box_shadow($shadow1, $shadow2:false, $shadow3:false, $shadow4:false) {
//
// Helper function to stack up to 4 box-shadows;
//
  @if $shadow2 {box-shadow: $shadow1, $shadow2;}
  @else if $shadow3 {box-shadow: $shadow1, $shadow2, $shadow3;}
  @else if $shadow4 {box-shadow: $shadow1, $shadow2, $shadow3, shadow4;}
  @else { box-shadow: $shadow1; }
}

@mixin button($t, $c:$theme_bg_color, $tc:$theme_fg_color, $colored_button:false ) {
//
// Button drawing function
// 
// $t:  button type,  
// $c:  base button color for colored* types
// $tc: optional text color for colored* types
//  
// possible $t values:
// normal, hover, active, insensitive, insensitive-active,
// backdrop, backdrop-active, backdrop-insensitive, backdrop-insensitive-active,
// colored, colored-hover, colored-active, colored-backdrop
// 
  border-width: 1px;
  border-style: solid;

  @if $t==normal { // normal button
    color: $tc;
    @if lightness($c) < 50% { //darker buttons need a less contrasty gradient
      background-image: linear-gradient(to bottom,
                                  lighten($c,5%),
                                  $c 40%,
                                  darken($c,5%)
                                  );
    }
    @else {
      background-image: linear-gradient(to bottom,
                                  lighten($c,15%),
                                  $c 40%,
                                  darken($c,10%)
                                  );
    }

    @if $colored_button { @include _button_border_color($c); }
    @else { border-color: $borders_color; }

    @include _button_text_shadow($tc);
    @include _button_box_shadow(inset 0 1px $borders_edge, 
                                $widget_bottom_hilight);
  }

  @else if $t==hover { // hovered button
    color: $tc;
    @include _button_border_color($c);
    background-image: linear-gradient(to bottom,
                                      lighten($c,14%),
                                      lighten($c,4%) 40%,
                                      $c);

    @include _button_text_shadow($tc);
    @include _button_box_shadow(inset 0 1px $borders_edge, 
                                $widget_bottom_hilight);
  }

  @else if $t==active { // pushed button
    color: $tc;
    @if $colored_button { @include _button_border_color($c); }
    @else { border-color: $borders_color; }
    @if $variant == 'light' {
      background-image: linear-gradient(to bottom,
                                        darken($c,15%),
                                        darken($c,11%) 3%,
                                        darken($c,10%));
    }
    @else {
      background-image: linear-gradient(to bottom,
                                        darken($c,10%),
                                        darken($c,5%) 3%);
    }
    @include _button_text_shadow($tc);
    @include _button_box_shadow(inset 0 2px 3px -1px transparentize(black,0.7),
                                $widget_bottom_hilight);
  }
  @else if $t==insensitive { 
  //
  // insensitive button
  //
    color: $_insensitive_fg_color;
    border-color: $_insensitive_borders_color;
    background-image: none;
    text-shadow: none;
    icon-shadow: none;
    @include _button_box_shadow($widget_bottom_hilight);
  }
  @else if $t==insensitive-active {
  //
  // insensitive pushed button
  //
    color: $_insensitive_fg_color;
    border-color: $_insensitive_borders_color;
    @include _button_box_shadow($widget_bottom_hilight);
    background-image: linear-gradient(to bottom, transparentize($_backdrop_borders_color,.9));
  }

  @else if $t==backdrop { // backdrop button
    color: $_backdrop_fg_color;
    border-color: $_backdrop_borders_color;
    background-image: none;
    text-shadow: none;
    icon-shadow: none;
    box-shadow: none;
  }

  @else if $t==backdrop-active { // backdrop pushed button
    color: $_backdrop_fg_color;
    border-color: $_backdrop_borders_color;
    background-image: linear-gradient(to bottom, transparentize($_backdrop_borders_color,.7));
  }

  @else if $t==backdrop-insensitive { // backdrop insensitive button
    color: $_backdrop_insensitive_color;
    border-color: $_backdrop_borders_color;
  }

  @else if $t==backdrop-insensitive-active { // backdrop insensitive 
                                             // pushed button
    color: $_backdrop_insensitive_color;
    border-color: $_backdrop_borders_color;
    background-image: linear-gradient(to bottom, transparentize($_backdrop_borders_color,.9));
    box-shadow: none;
  }
}
